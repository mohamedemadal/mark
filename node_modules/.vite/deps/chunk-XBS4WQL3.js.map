{
  "version": 3,
  "sources": ["../../src/.internal/core/util/Type.ts"],
  "sourcesContent": ["/**\n * A collection of utility functions for various type checks and conversion\n * @hidden\n */\n\n/**\n * ============================================================================\n * IMPORTS\n * ============================================================================\n * @hidden\n */\n\n/**\n * ============================================================================\n * MISC\n * ============================================================================\n * @hidden\n */\n\ntype Cond<T, Keys extends keyof T> = Keys extends never\n\t? never\n\t: { [K in Keys]: T[K] };\n\ntype Never<T> = T extends undefined ? never : T;\n\n/**\n * Selects all the keys of T which have a value of U.\n */\nexport type SelectKeys<T, U> = Never<{ [K in keyof T]: T[K] extends U ? K : never }[keyof T]>;\n\n/**\n * Creates a new type which is the same as T except it only has the properties of type U.\n */\nexport type Select<T, U> = Cond<T, SelectKeys<T, U>>;\n\n\n/**\n * @todo Description\n * @ignore Exclude from docs\n */\nexport type Public<T> = { [P in keyof T]: T[P] };\n\n\n/**\n * `Keyof<T>` is the same as `keyof T` except it only accepts string keys, not numbers or symbols.\n */\nexport type Keyof<T> = Extract<keyof T, string>;\n\n\n\n/**\n * ============================================================================\n * TYPE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Returns `true` if value is not a number (NaN).\n *\n * @param value Input value\n * @return Is NaN?\n */\nexport function isNaN(value: number): boolean {\n\treturn Number(value) !== value;\n}\n\n/**\n * Represents a type for all available JavaScript variable types.\n */\nexport type Type\n\t= \"[object Object]\"\n\t| \"[object Array]\"\n\t| \"[object String]\"\n\t| \"[object Number]\"\n\t| \"[object Boolean]\"\n\t| \"[object Date]\";\n\n/**\n * Returns a type of the value.\n *\n * @param value  Input value\n * @return Type of the value\n * @ignore\n */\nexport function getType<A>(value: A): Type {\n\treturn ({}).toString.call(value) as Type;\n}\n\n\n/**\n * Asserts that the condition is true.\n *\n * @param condition  Condition to check\n * @param message    Message to display in the error\n * @ignore\n */\nexport function assert(condition: boolean, message: string = \"Assertion failed\"): asserts condition {\n\tif (!condition) {\n\t\tthrow new Error(message);\n\t}\n}\n\n\n/**\n * ============================================================================\n * QUICK CONVERSION\n * ============================================================================\n * @hidden\n */\n\n\n/**\n * Converts any value into a `number`.\n *\n * @param value  Source value\n * @return Number representation of value\n */\nexport function toNumber(value: any): number {\n\tif (value != null && !isNumber(value)) {\n\t\tlet converted = Number(value);\n\t\tif (isNaN(converted) && isString(value) && value != \"\") {\n\t\t\treturn toNumber(value.replace(/[^0-9.\\-]+/g, ''));\n\t\t}\n\t\treturn converted;\n\t}\n\treturn value;\n}\n\n\n\n/**\n * Converts anything to Date object.\n *\n * @param value  A value of any type\n * @return Date object representing a value\n */\nexport function toDate(value: Date | number | string): Date {\n\tif (isDate(value)) {\n\t\t// TODO maybe don't create a new Date ?\n\t\treturn new Date(value);\n\t}\n\n\telse if (isNumber(value)) {\n\t\treturn new Date(value);\n\t}\n\n\telse {\n\t\t// Try converting to number (assuming timestamp)\n\t\tlet num = Number(value);\n\n\t\tif (!isNumber(num)) {\n\t\t\treturn new Date(value);\n\t\t}\n\t\telse {\n\t\t\treturn new Date(num);\n\t\t}\n\t}\n}\n\n/**\n * Converts numeric value into string. Deals with large or small numbers that\n * would otherwise use exponents.\n *\n * @param value  Numeric value\n * @return Numeric value as string\n */\nexport function numberToString(value: number): string {\n\t// TODO handle Infinity and -Infinity\n\tif (isNaN(value)) {\n\t\treturn \"NaN\";\n\t}\n\n\tif (value === Infinity) {\n\t\treturn \"Infinity\";\n\t}\n\n\tif (value === -Infinity) {\n\t\treturn \"-Infinity\";\n\t}\n\n\t// Negative 0\n\tif ((value === 0) && (1 / value === -Infinity)) {\n\t\treturn \"-0\";\n\t}\n\n\t// Preserve negative and deal with absoute values\n\tlet negative = value < 0;\n\n\tvalue = Math.abs(value);\n\n\t// TODO test this\n\tlet parsed = /^([0-9]+)(?:\\.([0-9]+))?(?:e[\\+\\-]([0-9]+))?$/.exec(\"\" + value)!;\n\tlet digits = parsed[1];\n\tlet decimals = parsed[2] || \"\";\n\n\tlet res: string;\n\n\t// Leave the nummber as it is if it does not use exponents\n\tif (parsed[3] === undefined) {\n\t\tres = (decimals === \"\" ? digits : digits + \".\" + decimals);\n\n\t} else {\n\t\tlet exponent = +parsed[3];\n\n\t\t// Deal with decimals\n\t\tif (value < 1) {\n\t\t\tlet zeros = exponent - 1;\n\n\t\t\tres = \"0.\" + repeat(\"0\", zeros) + digits + decimals;\n\n\t\t\t// Deal with integers\n\t\t} else {\n\t\t\tlet zeros = exponent - decimals.length;\n\n\t\t\tif (zeros === 0) {\n\t\t\t\tres = digits + decimals;\n\n\t\t\t} else if (zeros < 0) {\n\t\t\t\tres = digits + decimals.slice(0, zeros) + \".\" + decimals.slice(zeros);\n\n\t\t\t} else {\n\t\t\t\tres = digits + decimals + repeat(\"0\", zeros);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn negative ? \"-\" + res : res;\n}\n\n/**\n * Repeats a `string` number of times as set in `amount`.\n *\n * @ignore Exclude from docs\n * @todo Make this faster\n * @param string  Source string\n * @param amount  Number of times to repeat string\n * @return New string\n */\nexport function repeat(string: string, amount: number): string {\n  return new Array(amount + 1).join(string);\n}\n\n\n/**\n * ============================================================================\n * VALUE PRESENCE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Defines an optional value that can be of any type or `undefined`.\n */\nexport type Optional<A> = A | undefined;\n\n\n/**\n * ============================================================================\n * TYPE CHECK\n * ============================================================================\n * @hidden\n */\n\n/**\n * Checks if parameter is `Date`.\n *\n * @param value  Input value\n * @return Is Date?\n */\nexport function isDate(value: any): value is Date {\n\treturn getType(value) === \"[object Date]\";\n}\n\n/**\n * Checks if parameter is `string`.\n *\n * @param value  Input value\n * @return Is string?\n */\nexport function isString(value: any): value is string {\n\treturn typeof value === \"string\";\n}\n\n/**\n * Checks if parameter is `number`.\n *\n * @param value  Input value\n * @return Is number?\n */\nexport function isNumber(value: any): value is number {\n\treturn typeof value === \"number\" && Number(value) == value;\n}\n\n/**\n * Checks if parameter is `object`.\n *\n * @param value  Input value\n * @return Is object?\n */\nexport function isObject(value: any): value is object {\n\treturn typeof value === \"object\" && value !== null;\n}\n\n/**\n * Checks if parameter is `Array`.\n *\n * @param value  Input value\n * @return Is Array?\n */\nexport function isArray(value: any): value is Array<unknown> {\n\treturn Array.isArray(value);\n}\n\n\n/**\n * ============================================================================\n * STATIC CONSTANTS\n * ============================================================================\n * @hidden\n */\n\n\n/**\n * @ignore Exclude from docs\n */\nexport const PLACEHOLDER: string = \"__§§§__\";\n\n/**\n * @ignore Exclude from docs\n */\nexport const PLACEHOLDER2: string = \"__§§§§__\";\n"],
  "mappings": ";;;;;AAAA;;;;;;;;;;;;;;;;;AA+DM,SAAU,MAAM,OAAa;AAClC,SAAO,OAAO,KAAK,MAAM;AAC1B;AAoBM,SAAU,QAAW,OAAQ;AAClC,SAAQ,CAAA,EAAI,SAAS,KAAK,KAAK;AAChC;AAUM,SAAU,OAAO,WAAoB,UAAkB,oBAAkB;AAC9E,MAAI,CAAC,WAAW;AACf,UAAM,IAAI,MAAM,OAAO;;AAEzB;AAiBM,SAAU,SAAS,OAAU;AAClC,MAAI,SAAS,QAAQ,CAAC,SAAS,KAAK,GAAG;AACtC,QAAI,YAAY,OAAO,KAAK;AAC5B,QAAI,MAAM,SAAS,KAAK,SAAS,KAAK,KAAK,SAAS,IAAI;AACvD,aAAO,SAAS,MAAM,QAAQ,eAAe,EAAE,CAAC;;AAEjD,WAAO;;AAER,SAAO;AACR;AAUM,SAAU,OAAO,OAA6B;AACnD,MAAI,OAAO,KAAK,GAAG;AAElB,WAAO,IAAI,KAAK,KAAK;aAGb,SAAS,KAAK,GAAG;AACzB,WAAO,IAAI,KAAK,KAAK;SAGjB;AAEJ,QAAI,MAAM,OAAO,KAAK;AAEtB,QAAI,CAAC,SAAS,GAAG,GAAG;AACnB,aAAO,IAAI,KAAK,KAAK;WAEjB;AACJ,aAAO,IAAI,KAAK,GAAG;;;AAGtB;AASM,SAAU,eAAe,OAAa;AAE3C,MAAI,MAAM,KAAK,GAAG;AACjB,WAAO;;AAGR,MAAI,UAAU,UAAU;AACvB,WAAO;;AAGR,MAAI,UAAU,WAAW;AACxB,WAAO;;AAIR,MAAK,UAAU,KAAO,IAAI,UAAU,WAAY;AAC/C,WAAO;;AAIR,MAAI,WAAW,QAAQ;AAEvB,UAAQ,KAAK,IAAI,KAAK;AAGtB,MAAI,SAAS,gDAAgD,KAAK,KAAK,KAAK;AAC5E,MAAI,SAAS,OAAO,CAAC;AACrB,MAAI,WAAW,OAAO,CAAC,KAAK;AAE5B,MAAI;AAGJ,MAAI,OAAO,CAAC,MAAM,QAAW;AAC5B,UAAO,aAAa,KAAK,SAAS,SAAS,MAAM;SAE3C;AACN,QAAI,WAAW,CAAC,OAAO,CAAC;AAGxB,QAAI,QAAQ,GAAG;AACd,UAAI,QAAQ,WAAW;AAEvB,YAAM,OAAO,OAAO,KAAK,KAAK,IAAI,SAAS;WAGrC;AACN,UAAI,QAAQ,WAAW,SAAS;AAEhC,UAAI,UAAU,GAAG;AAChB,cAAM,SAAS;iBAEL,QAAQ,GAAG;AACrB,cAAM,SAAS,SAAS,MAAM,GAAG,KAAK,IAAI,MAAM,SAAS,MAAM,KAAK;aAE9D;AACN,cAAM,SAAS,WAAW,OAAO,KAAK,KAAK;;;;AAK9C,SAAO,WAAW,MAAM,MAAM;AAC/B;AAWM,SAAU,OAAO,QAAgB,QAAc;AACnD,SAAO,IAAI,MAAM,SAAS,CAAC,EAAE,KAAK,MAAM;AAC1C;AA6BM,SAAU,OAAO,OAAU;AAChC,SAAO,QAAQ,KAAK,MAAM;AAC3B;AAQM,SAAU,SAAS,OAAU;AAClC,SAAO,OAAO,UAAU;AACzB;AAQM,SAAU,SAAS,OAAU;AAClC,SAAO,OAAO,UAAU,YAAY,OAAO,KAAK,KAAK;AACtD;AAQM,SAAU,SAAS,OAAU;AAClC,SAAO,OAAO,UAAU,YAAY,UAAU;AAC/C;AAQM,SAAU,QAAQ,OAAU;AACjC,SAAO,MAAM,QAAQ,KAAK;AAC3B;AAcO,IAAM,cAAsB;AAK5B,IAAM,eAAuB;",
  "names": []
}
