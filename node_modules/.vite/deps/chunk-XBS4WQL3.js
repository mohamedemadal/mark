import {
  __export
} from "./chunk-2GTGKKMZ.js";

// node_modules/@amcharts/amcharts5/.internal/core/util/Type.js
var Type_exports = {};
__export(Type_exports, {
  PLACEHOLDER: () => PLACEHOLDER,
  PLACEHOLDER2: () => PLACEHOLDER2,
  assert: () => assert,
  getType: () => getType,
  isArray: () => isArray,
  isDate: () => isDate,
  isNaN: () => isNaN,
  isNumber: () => isNumber,
  isObject: () => isObject,
  isString: () => isString,
  numberToString: () => numberToString,
  repeat: () => repeat,
  toDate: () => toDate,
  toNumber: () => toNumber
});
function isNaN(value) {
  return Number(value) !== value;
}
function getType(value) {
  return {}.toString.call(value);
}
function assert(condition, message = "Assertion failed") {
  if (!condition) {
    throw new Error(message);
  }
}
function toNumber(value) {
  if (value != null && !isNumber(value)) {
    let converted = Number(value);
    if (isNaN(converted) && isString(value) && value != "") {
      return toNumber(value.replace(/[^0-9.\-]+/g, ""));
    }
    return converted;
  }
  return value;
}
function toDate(value) {
  if (isDate(value)) {
    return new Date(value);
  } else if (isNumber(value)) {
    return new Date(value);
  } else {
    let num = Number(value);
    if (!isNumber(num)) {
      return new Date(value);
    } else {
      return new Date(num);
    }
  }
}
function numberToString(value) {
  if (isNaN(value)) {
    return "NaN";
  }
  if (value === Infinity) {
    return "Infinity";
  }
  if (value === -Infinity) {
    return "-Infinity";
  }
  if (value === 0 && 1 / value === -Infinity) {
    return "-0";
  }
  let negative = value < 0;
  value = Math.abs(value);
  let parsed = /^([0-9]+)(?:\.([0-9]+))?(?:e[\+\-]([0-9]+))?$/.exec("" + value);
  let digits = parsed[1];
  let decimals = parsed[2] || "";
  let res;
  if (parsed[3] === void 0) {
    res = decimals === "" ? digits : digits + "." + decimals;
  } else {
    let exponent = +parsed[3];
    if (value < 1) {
      let zeros = exponent - 1;
      res = "0." + repeat("0", zeros) + digits + decimals;
    } else {
      let zeros = exponent - decimals.length;
      if (zeros === 0) {
        res = digits + decimals;
      } else if (zeros < 0) {
        res = digits + decimals.slice(0, zeros) + "." + decimals.slice(zeros);
      } else {
        res = digits + decimals + repeat("0", zeros);
      }
    }
  }
  return negative ? "-" + res : res;
}
function repeat(string, amount) {
  return new Array(amount + 1).join(string);
}
function isDate(value) {
  return getType(value) === "[object Date]";
}
function isString(value) {
  return typeof value === "string";
}
function isNumber(value) {
  return typeof value === "number" && Number(value) == value;
}
function isObject(value) {
  return typeof value === "object" && value !== null;
}
function isArray(value) {
  return Array.isArray(value);
}
var PLACEHOLDER = "__§§§__";
var PLACEHOLDER2 = "__§§§§__";

export {
  isNaN,
  toNumber,
  toDate,
  numberToString,
  isDate,
  isString,
  isNumber,
  isObject,
  isArray,
  PLACEHOLDER,
  PLACEHOLDER2,
  Type_exports
};
//# sourceMappingURL=chunk-XBS4WQL3.js.map
